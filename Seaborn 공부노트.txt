-seaborn은 더 상세한 비주얼라이제이션 라이브러리이자, 판다스 데이터프레임을 그대로 받기 때문에 csv에서 데이터를 플롯하고자 할 때 유용한 패키지이다. 판다스와 상성이 굉장히 좋다고 함

-import seaborn as sns 로 가져옴. 왜 sns지.. s 하나 어디서 왔냐

-seaborn과 matplotlib이 어떻게 다른지 살펴보자. 예를 들어 Gender, Mean satisfaction 두개의 컬럼을 가진 데이터 프레임을 이용해서 젠더에 따른 만족도를 bar chart로 나타내고 싶다고 해보자.
matplotlib을 쓴다면 다음과 같이 코드를 작성하게 된다. 
df = pd.read_csv("results.csv")
ax = plt.subplot()
plt.bar(range(len(df)),
        df["Mean Satisfaction"])
ax.set_xticks(range(len(df)))
ax.set_xticklabels(df.Gender)
plt.xlabel("Gender")
plt.ylabel("Mean Satisfaction")

어려운 건 아니지만 굉장히 길다. 라벨링이나 y_value를 지정할 때마다 각각의 컬럼을 빼와야하는 것도 번거롭고. 
seaborn을 이용하면 sns.barplot() 한개로 같은 그래프를 만들어낼 수 있다고(!) 함. 필수로 들어가는 키워드는 data, x, y 세가지다. data는 판다스 데이터프레임, x는 데이터 프레임의 컬럼 이름 중 x가 될 컬럼 이름, y는 바로 표시하고 싶은 컬럼이름. (x, y는 둘다 str을 받는다) 만들어져 있는 데이터프레임을 다시 분해할 필요 없이 그대로 쓸 수 있다는게 굉장한 이점이다. 

- 앗 근데 seaborn으로 만들었더라도 출력할 때는 plt.show()를 사용한다.

-만약 x로 택한 컬럼에 같은 벨류들이 있다면? a 와 b가 섞여 있는 컬럼이라 치면 바는 a에 대해서 한개, b에 대해서 한 개가 생기며 내가 택한 y value들의 mean이 자동으로 뜬다(아무 설정도 안했을 경우) 즉, aggregation이 자동으로 진행된다는 얘기

-sns.barplot()은 디폴트로 error bar 가 생기는데, 기본으로는 bootstrapped confidence interval 이라는 것을 사용하며 간단히얘기하자면 오차가 5프로 이내일 것으로 예상하는 interval이다. 만약 에러 바에 standard deviation 을 사용하고 싶으면 ci='sd' 를 넣어주자. 

-mean이 아닌 다른 aggregate를 사용하고 싶다면 sns.barplot()안에 estimator 라는 키워드를 넣을 수 있다. 중간값을 내고 싶으면 estimator = np.median 을 넣으면 되고, 각각의 value가 나온 횟수를 알고 싶을 때는 estimator = len으로 할 수 있다. estimator는 리스트에 적용가능한 펑션은 전부 다 가능하다. 근데 횟수 len이 이해가 안되넹.. 

sns.barplot(data=df,
  x="Gender",
  y="Response",
  estimator=len)
리스폰스 컬럼에 나타나는 특정 값의 횟수를 계산하기 위한 코드라고 함 흠. 근데 실제로 돌려서 show해보니 male의 response 횟수와 women의 response 횟수 두 개의 바가 뜬다. response의 value(1-10까지 가능)를 확인할 수 있는 방법은 없음. 

-hue 라는 키워드를 통해서 variable을 한 개 더 추가할 수 있다. 이걸 nested categorical variable 이라고 한다. 
sns.barplot(data=df,
            x="Gender",
            y="Response",
            hue="Age Range")
은 원래 male/ female 에 따른 response 값을 보여줬지만 hue = 'Age Range' 를 추가해서 male에 색깔로 구분된 4개의 바, female에 색깔로 구분된 4개의 바, 총 8개가 뜬다. 4개는 age range의 categorical variable 갯수이다. 18-25, 25-35, 35-45, 45+ 이렇게 해서 젠더에 따른 response의 차이와, 나이 대에 따른 response의 비교 둘 다 할 수 있다. 

- bar plot을 통해 평균값을 알 수는 있지만 데이터셋이 어떻게 분포하고 있는지는 알 수 없다. 평균 근처에 다 몰려있을지, 정규분포 형태를 띌지, 아니면 평균을 중심으로 양옆으로 고르게 분포하고 있을지. 보통 분포도를 관찰하기 위해서는 histogram을 사용하는데 seaborn 에서는 또 다른 distributions graphing 방법이 있다고 한다. 그게 KDE plot 이다. (Kernel Density Estimator)

- 히스토그램은 bin을 어떻게 나눌지, bin의 너비를 어떻게 할 지 등의 요소에 따라 같은 데이터셋이더라도 전체적인 형태가 달라질 수 있는데 KDE는 하나의 곡선으로 보여주기 때문에 그런 문제점을 완화해준다고 한다. 한마디로 히스토그램은 여러개의 바가 연속적으로 붙어있는 형태인데 이 특성에서 생기는 문제점을 보완해준다는 얘기

- KDE는 univariate 에 관해서만 표현가능하다. bivariate 혹은 two-dimensional 데이터셋이 대해서는 사용할 수 없는 듯.

- KDE 를 plot하기 위해서는 sns.kdeplot()을 사용한다. 필수 키워드로는 data와 shade 가 들어간다. data에는 univariate 데이터 셋을 넣어주면 되는데, 파이썬 리스트, 넘파이 어레이, 판다스 시리즈 같은 애들이면 된다. shade는 True/False 로 표시하며 선 아래의 영역을 칠할지를 결정.

-sns.barplot()과 다르게 한개의 피규어에 여러개의 데이터를 나타내고 싶으면 kdeplot()을 여러번 실행해줘야 한다.

- KDE plot 은 전체적인 분포 형태를 보여주는 반면 aggregate 수치들이나 아웃라이어의 존재 같은 것들을 확인하기 어렵다. Box Plot(box-and-whisker plot) 은 반대로 수치를 보여준다. 전체 horizontal 선은 데이터의 분포 범위를 보여주고 다이아몬드 점은 아웃라이어 표시이다. 사각형의 중간 세로선은 메디안 값, 박스의 너비는 interquartile 범위이다(즉 68%가 속해있는 범위)

- KDE 는 한 그래프에 여러개를 표시하면 좀 비교하기가 힘든 반면 박스 플롯은 비교하기 아주 편하다. 그리고 데이터프레임을 한번에 집어넣을 수도 있음. 대신 unimodal, bimodal 같은 형태는 이 그래프를 통해서 알 수 없다.

-boxplot은 sns.boxplot()을 사용한다. 세개의 필수 아규먼트는 data, x, y 이고 data는 데이터프레임이나 혹은 one dimensional list도 상관없음. x는 시리즈, 리스트, 어레이처럼 무조건 원디멘셔널셋이어야함. y는 벨류값

- KDE와 box plot을 합친 violin plot이라는게 있다. 되게 생소하게 생겼는데 일단 KDE가 x축 기준으로 대칭되어 있고 가운데 흰점이 메디안, 굵은 선의 범위가 interquartile, 얇은 선의 범위가 confidence interval (95%) 이다.

- sns.violinplot()을 사용해서 바이올린 플롯을 할 수 있다. 똑같이 data, x, y 를 받는다. 













